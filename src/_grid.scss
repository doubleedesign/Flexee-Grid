/**
 * Flexee Grid
 * Flexbox-based CSS grid system
 * Author: Leesa Ward
 * URI: https://www.github.com/doubleedesign/Flexee-Grid
 */

// Main config
$base-font-size: 	16px;
$gutter:     		2em;
$column-count: 		12;

// Breakpoints
$breakpoints: (
	'smaller'	: 30em,		// 480px
	'small'  	: 37.5em, 	// 600px
	'medium' 	: 48em, 	// 768px
	'tablet' 	: 60em, 	// 960px
	'large'  	: 80em,		// 1280px
	'xlarge' 	: 100em, 	// 1600px
	'xxlarge' 	: 120em, 	// 1920px
);

// Spacing
$grid-gutter: (
	'start' 	: 0.625em, // 10px
	'small'  	: 0.625em, // 10px
	'medium' 	: 1.250em, // 20px
	'tablet' 	: 1.250em, // 20px
	'large'  	: 1.875em, // 30px
	'xlarge' 	: 2.500em, // 40px
	'xxlarge' 	: 2.500em, // 50px
);
$global-padding: 1.875em;
$global-margin: 1.875em;

// Boundaries
$start: 			20em; 		// 320px, assuming $base-font-size is 16px
$boundary: 			140.625em; 	// 2250px; Note: 1920px is 120em if you prefer that
$row-width: 		80em; 		// The maximum width of each row.
// It may be different to $boundary, which is for the whole site.
// If you want to use the xlarge and xxlarge breakpoints for the layout,
// set this to the same or larger than the largest breakpoint you want to use.


// Breakpoint mixins
@mixin bp-small {
	@media only screen and (min-width: map-get($breakpoints, 'small')) {
		@content;
	}
}
@mixin bp-medium {
	@media only screen and (min-width: map-get($breakpoints, 'medium')) {
		@content;
	}
}
@mixin bp-tablet {
	@media only screen and (min-width: map-get($breakpoints, 'tablet')) {
		@content;
	}
}
@mixin bp-large {
	@media only screen and (min-width: map-get($breakpoints, 'large')) {
		@content;
	}
}
@mixin bp-xlarge {
	@media only screen and (min-width: map-get($breakpoints, 'xlarge')) {
		@content;
	}
}
@mixin bp-xxlarge {
	@media only screen and (min-width: map-get($breakpoints, 'xxlarge')) {
		@content;
	}
}

// General
body {
	min-width: $start;
	max-width: $boundary;
	margin: 0 auto;
}

[class*="row"]{
	box-sizing: border-box;
	display: flex;
	flex-flow: row wrap;
}

.column,
.columns {
	box-sizing: border-box;
	flex: 0 auto;
	padding-left: map-get($grid-gutter, 'start');
	padding-right: map-get($grid-gutter, 'start');

	@each $name, $value in $breakpoints {

		@media only screen and (min-width: map-get($breakpoints, $name)) {
			padding-left: map-get($grid-gutter, $name);
			padding-right: map-get($grid-gutter, $name);
		}
	}
}

@mixin grid-gutter-collapse { // Removes the padding from columns
	padding-left: 0;
	padding-right: 0;
}

.no-gutter {
	@include grid-gutter-collapse;
}

// All rows
[class*="row"] {
	max-width: $row-width;
	margin: 0 auto;
}

/*
 * ==== OPTION ONE ====
 * Evenly distributed rows of blocks based on the class given to the containing row,
 * wrapping onto a new line if there's more
 */

// Starting/all sizes
@for $i from 1 through $column-count {
	.row-of-#{$i} {
		.column {
			flex-basis: 100%/$i;
			max-width: 100%/$i;
		}
	}
}

// Responsive. Loop through the breakpoints,
// and within that loop through the column count to create .breakpoint-row-of-x classes
// Note: Dynamic mixin names are not a thing so we have to use the full media query
@each $name, $value in $breakpoints  {

	@media only screen and (min-width: map-get($breakpoints, $name)) {

		@for $i from 1 through $column-count {
			.#{$name}-row-of-#{$i} {
				.column {
					flex-basis: 100%/$i;
					max-width: 100%/$i;
				}
			}
		}
	}
}


/*
 * ==== OPTION TWO ====
 * Variable width blocks based on the class given to the columns
 */

$column-width: (100%/$column-count);
/*
$columns-2: ($columns-1*2);
$columns-3: ($columns-1*3);
$columns-4: ($columns-1*4);
$columns-5: ($columns-1*5);
$columns-6: ($columns-1*6);
$columns-7: ($columns-1*7);
$columns-8: ($columns-1*8);
$columns-9: ($columns-1*9);
$columns-10: ($columns-1*10);
$columns-11: ($columns-1*11);
$columns-12: ($columns-1*12); */
// If your $column-count is larger than 12, add more variables here accordingly. You will also need to add more column classes below.

.columns {

	// Starting/all sizes
	@for $i from 1 through $column-count {
		&.start-#{$i} {
			flex-basis: ($column-width*$i);
		}
	}

	// Responsive. Loop through the breakpoints,
	// and within that loop through the column count to create column classes
	// Note: Dynamic mixin names are not a thing so we have to use the full media query
	@each $name, $value in $breakpoints  {
		@media only screen and (min-width: map-get($breakpoints, $name)) {

			@for $i from 1 through $column-count {
				&.#{$name}-#{$i} {
					flex-basis: ($column-width*$i);
				}
			}
		}
	}
}


/*
 * ==== OPTION THREE ====
 * Spread all blocks evenly as long as their content fits, no matter how many there is.
 * Can be the messiest depending on how uniform your content is.
 */

.row-fit {
	> .column {
		flex: auto;
	}
}